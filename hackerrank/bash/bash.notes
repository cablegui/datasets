Challenge 1
-----------

Problem Statement


for loops in Bash can be used in several ways: 
 - iterating between two integers, a and b 
 - iterating between two integers, a and b, and incrementing by c each time 
 - iterating through the elements of an array, etc. 

Your task is to use for loops to display only odd natural numbers from 1 to 99. 

Input 
There is no input. 

Output 
1
3
5
.
.
.
.
.
99  


Solution 1
----------

for i in {1..99..2}
 do
  echo $i
 done

Challenge 2
-----------


Problem Statement


Write a Bash script which accepts name as input and displays a greeting: "Welcome (name)"

Input Format 
 One line, containing a name. 

Output Format 
 One line: "Welcome (name)" (quotation marks excluded). 
 The evaluation will be case-sensitive.

Sample Input 0 
Dan  


Sample Output 0 
Welcome Dan  


Sample Input 1 
Prashant


Sample Output 1 
Welcome Prashant


A quick introduction to 'Echo' 

This is the equivalent of common output commands in most programming language (print or puts statements). 

For Example: 
echo "Greetings"


This outputs just one word "Greetings" (without the quotation marks). 
echo "Greetings `$USER, your current working directory is $`PWD"


This picks up the values of the environment variables USER and PWD and displays something like: 
Greetings prashantb1984, your current working directory is /home/prashantb1984  


The above message, of course, will vary from system to system, depending on the setting of environment variables.

Accepting Inputs 

This can be accomplished using the read statement. 
read number
echo "The number you have entered is $number"  


If the user provides an input 4, the output is: 
The number you have entered is 4  


Consider this snippet: 
read name
echo "The name you have entered is $name"  


If the user provides an input Max, the output is: 
 The name you have entered is Max 

Solution 2
----------

#!/bin/sh

read name
echo "The name you have entered is $name"


Challenge
---------


Problem Statement


for loops in Bash can be used in several ways: - iterating between two integers, a and b - iterating between two integers, a and b, and incrementing by c each time - iterating through the elements of an array, etc. 

Use _for: loops to display the natural numbers from 1 to 50. 

Input 
There is no input 

Output 
1
2
3
4
5
.
.
.
.
.
50  


Solution
--------

#!/bin/sh

for i in {1..50}
do
 echo $i
done


Challenge
---------


Problem Statement


Given two integers, X and Y, find their sum, difference, product, and quotient. 

Input Format 
 Two lines containing one integer each (X and Y, respectively). 

Input Constraints 
−100≤X,Y≤100 
Y≠0

Output Format 
 Four lines containing the sum (X+Y), difference (X−Y), product (X×Y), and quotient (X÷Y), respectively. 
 (While computing the quotient, print only the integer part.)

Sample Input 
5  
2


Sample Output 
7
3
10
2

Solution
--------

#!/bin/sh

read number1
read number2

echo $(($number1+$number2))
echo $(($number1-$number2))
echo $(($number1*$number2))
echo $(($number1/$number2))


Challenge
---------


Problem Statement


Given two integers, X and Y, identify whether X<Y or X>Y or X=Y. 

Comparisons in a shell script may either be accomplished using regular operators (such as < or >) or using (-lt, -gt, -eq, i.e. less than, greater than, equal to) for POSIX shells. This discussion on stack overflow contains useful information on this topic.

Input Format 
 Two lines containing one integer each (X and Y, respectively). 

Output Format 
 Exactly one of the following lines: 
 - X is less than Y 
 - X is greater than Y 
 - X is equal to Y 

Sample Input 1 
5  
2  


Sample Output 1 
X is greater than Y  


Sample Input 2 
2
2  


Sample Output 2 
X is equal to Y   


Sample Input 3 
2
3  


Sample Output 3 
X is less than Y 

Solution
--------

#!/bin/sh

read number1
read number2

if [ $number1 -lt $number2 ]
then

 echo "X is less than Y"

elif [ $number1 -gt $number2 ]
then

 echo "X is greater than Y"

elif [ $number1 -eq $number2 ]
then

 echo "X is equal to Y"

fi

Challenge
---------


Problem Statement


if statements in Bash are often used in four important ways: 
1. if...then...fi statements
2. if...then...else...fi statements  
3. if..elif..else..fi  
4. if..then..else..if..then..fi..fi.. (Nested Conditionals)


The Recommended Resources section may give you a clearer idea of conditionals in Bash. 

Your task 

Read in one character from the user (this may be 'Y', 'y', 'N', 'n'). If the character is 'Y' or 'y' display "YES". If the character is 'N' or 'n' display "NO". No other character will be provided as input. 

Input Format 
 One character (this may be 'Y', 'y', 'N', 'n').

Output Format 
 One word: either "YES" or "NO" (quotation marks excluded).

Sample Input 1 
y  


Sample Output 1 
YES  

Solution
--------

#!/bin/sh

read userInput

declare -l userInput
userInput=$userInput

if [[ $userInput == "y" ]]
then

 echo "YES"
elif [[ $userInput == "n" ]]
then

 echo "NO"
else

 echo ""
fi

Challenge 7
-----------


Problem Statement


if statements in Bash are often used in four important ways: 
1. if...then...fi statements
2. if...then...fi...else statements  
3. if..elif..else..fi  
4. if..then..else..if..then..fi..fi.. (Nested Conditionals)


The Recommended Resources section may give you a clearer idea of conditionals in Bash. 

Your task: 
 Given three integers (X, Y, and Z) representing the three sides of a triangle, identify whether the triangle is Scalene, Isosceles, or Equilateral.

Input Format 
 Three integers, each on a new line. 

Input Constraints 
1≤X,Y,Z≤1000 
 Sum of any two sides will be greater than the third.

Output Format 
 One word: either "SCALENE" or "EQUILATERAL" or "ISOSCELES" (quotation marks excluded).

Solution 7
----------

#!/bin/sh

read side1
read side2
read side3


# if [[ $(($side1 + $side2)) -gt $side3 ]]; then num=3; else num=4; fi

# echo $num

if [[ ( $side1 == $side2 && $side1 != $side3 ) || ( $side1 == $side3 && $side1 != $side2 ) || ( $side2 == $side3 && $side2 != $side1 ) ]]
then

 echo "ISOSCELES"
elif [[ ( $side1 == $side2 ) && ( $side2 == $side3 ) ]]
then

  echo "EQUILATERAL"
elif [[ ( $side1 != $side2 ) && ( $side2 != $side3 ) ]]
then

 echo "SCALENE"
fi

Challenge 8
-----------


Problem Statement


Let's get started with some simple numerical computations in Bash. 

As can be observed from the examples below, there are several ways of making simple numerical calculations in Bash. Just trying to echo an expression wrapped in quotation marks will not work. Wrapping the expression in double parenthesis $((..)) evaluates it, but this is confined to integer computations. To evaluate expressions involving decimal places (floating points) "bc -l" is very useful.
~$ echo "5+5"
5+5
~$ echo "5+5"| bc
10
~$ echo "5+5"| bc -l
10
~$ echo "5+5.2"| bc -l
10.2
~$ echo "5+5.2"| bc
10.2
~$ echo "3/4"| bc
0
~$ echo "3/4"| bc -l
.75000000000000000000 
~`$ echo $`((3+3))
6  



To display the final result by rounding it to a certain number of decimal places, "printf" with a format specified can accomplish the task by specifying the "scale" (number of decimal points). Note that the ordering of the numbers matters in this case, as demonstrated below.
~$ echo "scale = 2; 10 * 100 / 30" | bc
33.33
~$ echo "scale = 2; 10 / 30 * 100" | bc
33.00
~$ echo "scale = 2; (10 / 30) * 100" | bc
33.00


'Expr' is another way to accomplish such tasks. 
~`$ echo $`(expr 5 + 5)
10
~`$ echo $`(expr 5 - 5 + 2 )
2
~`$ echo $`(expr 5 - 5 + 2 / 3 )
0
~`$ echo $`(expr 5 - 5 + 2 / 1 )
2


Be careful with spacing in such expressions! Bash is very sensitive to them. 

Task 

We provide you with expressions containing +,-,*,^, / and parenthesis. None of the numbers in the expression involved will exceed 999. 
 Your task is to evaluate the expression and display the output correct to 3 decimal places. 

Sample Input 1
5+50*3/20 + (19*2)/7


Sample Output 1 
17.929


Sample Input 2
-105+50*3/20 + (19^2)/7


Sample Output 2 
-45.929


Sample Input 3 
(-105.5*7+50*3)/20 + (19^2)/7


Sample Output 3 
 22.146

Solution
--------

#!/bin/sh

read expression

myval=`echo "$expression" | bc -l`

printf "%.3f" $myval

Challenge 9
-----------

Problem Statement


Given N integers, compute their average correct to three decimal places. 

Input Format 
 The first line contains an integer, N. 
N lines follow, each containing a single integer. 

Output Format 
 Display the average of the N integers, rounded off to three decimal places. 

Input Constraints 
1≤N≤500 
−10000≤x≤10000 (x refers to elements of the list of integers for which the average is to be computed) 

Sample Input
4
1
2
9
8


Sample Output
5.000


Explanation 
 The '4' in the first line indicates that there are four integers whose average is to be computed. The average = (1 + 2 + 9 + 8)/4 = 20/4 = 5.000 (correct to three decimal places) Please include the zeroes even if they are redundant (e.g. 0.000 instead of 0).

Solution 9
----------

#!/bin/sh

read numOfIntegers

sum=0

for (( i=1; i<=$numOfIntegers; i++))
do
        read myNum
        sum=$(( $sum + $myNum ))
done

printf "%.3f" `echo "$sum/$numOfIntegers" | bc -l`


Challenge 10
------------


Problem Statement



**Submissions with the design hard-coded in them, will be rejected** 
____________________________________________________________________________________________________
__________________1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1___________________
___________________1___1___1___1___1___1___1___1___1___1___1___1___1___1___1___1____________________
___________________1___1___1___1___1___1___1___1___1___1___1___1___1___1___1___1____________________
____________________1_1_____1_1_____1_1_____1_1_____1_1_____1_1_____1_1_____1_1_____________________
_____________________1_______1_______1_______1_______1_______1_______1_______1______________________
_____________________1_______1_______1_______1_______1_______1_______1_______1______________________
_____________________1_______1_______1_______1_______1_______1_______1_______1______________________
______________________1_____1_________1_____1_________1_____1_________1_____1_______________________
_______________________1___1___________1___1___________1___1___________1___1________________________
________________________1_1_____________1_1_____________1_1_____________1_1_________________________
_________________________1_______________1_______________1_______________1__________________________
_________________________1_______________1_______________1_______________1__________________________
_________________________1_______________1_______________1_______________1__________________________
_________________________1_______________1_______________1_______________1__________________________
_________________________1_______________1_______________1_______________1__________________________
__________________________1_____________1_________________1_____________1___________________________
___________________________1___________1___________________1___________1____________________________
____________________________1_________1_____________________1_________1_____________________________
_____________________________1_______1_______________________1_______1______________________________
______________________________1_____1_________________________1_____1_______________________________
_______________________________1___1___________________________1___1________________________________
________________________________1_1_____________________________1_1_________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
__________________________________1_____________________________1___________________________________
___________________________________1___________________________1____________________________________
____________________________________1_________________________1_____________________________________
_____________________________________1_______________________1______________________________________
______________________________________1_____________________1_______________________________________
_______________________________________1___________________1________________________________________
________________________________________1_________________1_________________________________________
_________________________________________1_______________1__________________________________________
__________________________________________1_____________1___________________________________________
___________________________________________1___________1____________________________________________
____________________________________________1_________1_____________________________________________
_____________________________________________1_______1______________________________________________
______________________________________________1_____1_______________________________________________
_______________________________________________1___1________________________________________________
________________________________________________1_1_________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________




Creating a Fractal Tree from Y-shaped branches 

This challenge involves the construction of trees, in the form of ASCII Art. 

We have to deal with real world constraints, so we cannot keep repeating the pattern infinitely. So, we will provide you a number of iterations, and you need to generate the ASCII version of the Fractal Tree for only those many iterations (or, levels of recursion). A few samples are provided below.

Iteration #1 
 In the beginning, we simply create a Y. There are 63 rows and 100 columns in the grid below. The triangle is composed of underscores and ones as shown below. The vertical segment and the slanting segments are both 16 characters in length. 
  
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
_________________________________1_______________________________1__________________________________
__________________________________1_____________________________1___________________________________
___________________________________1___________________________1____________________________________
____________________________________1_________________________1_____________________________________
_____________________________________1_______________________1______________________________________
______________________________________1_____________________1_______________________________________
_______________________________________1___________________1________________________________________
________________________________________1_________________1_________________________________________
_________________________________________1_______________1__________________________________________
__________________________________________1_____________1___________________________________________
___________________________________________1___________1____________________________________________
____________________________________________1_________1_____________________________________________
_____________________________________________1_______1______________________________________________
______________________________________________1_____1_______________________________________________
_______________________________________________1___1________________________________________________
________________________________________________1_1_________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________




Iteration #2 

At the top of the left and right branches of the first Y, we now add a pair of Y-shapes, which are half the size of the original Y. 

____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
____________________________________________________________________________________________________
_________________________1_______________1_______________1_______________1__________________________
__________________________1_____________1_________________1_____________1___________________________
___________________________1___________1___________________1___________1____________________________
____________________________1_________1_____________________1_________1_____________________________
_____________________________1_______1_______________________1_______1______________________________
______________________________1_____1_________________________1_____1_______________________________
_______________________________1___1___________________________1___1________________________________
________________________________1_1_____________________________1_1_________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
_________________________________1_______________________________1__________________________________
__________________________________1_____________________________1___________________________________
___________________________________1___________________________1____________________________________
____________________________________1_________________________1_____________________________________
_____________________________________1_______________________1______________________________________
______________________________________1_____________________1_______________________________________
_______________________________________1___________________1________________________________________
________________________________________1_________________1_________________________________________
_________________________________________1_______________1__________________________________________
__________________________________________1_____________1___________________________________________
___________________________________________1___________1____________________________________________
____________________________________________1_________1_____________________________________________
_____________________________________________1_______1______________________________________________
______________________________________________1_____1_______________________________________________
_______________________________________________1___1________________________________________________
________________________________________________1_1_________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________
_________________________________________________1__________________________________________________




Input Format 
 A single integer, N. 

Constraints 
 N <= 5 

Output Format 
 The Nth iteration of the Fractal Tree, as shown above. It should be a matrix of 63 rows and 100 columns. (i.e. 6300 printable characters) It should be composed entirely of underscores and ones, in a manner similar to the examples provided. Do not include any extra leading or trailing spaces. 


Solution 10
-----------

